import streamlit as st
from openai import OpenAI

# üëâ ‡¶è‡¶ñ‡¶æ‡¶®‡ßá ‡¶§‡ßã‡¶Æ‡¶æ‡¶∞ API key ‡¶¨‡¶∏‡¶æ‡¶ì
API_KEY = "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"
client = OpenAI(api_key=API_KEY)

# Streamlit Config
st.set_page_config(page_title="‡¶¨‡¶æ‡¶Ç‡¶≤‡¶æ ‡¶è‡¶Ü‡¶á ‡¶ö‡ßç‡¶Ø‡¶æ‡¶ü‡¶¨‡¶ü ü§ñ", page_icon="ü§ñ", layout="centered")

# Custom CSS (‡¶Æ‡ßã‡¶¨‡¶æ‡¶á‡¶≤-‡¶´‡ßç‡¶∞‡ßá‡¶®‡ßç‡¶°‡¶≤‡¶ø ‡¶∏‡ßç‡¶ü‡¶æ‡¶á‡¶≤)
st.markdown("""
    <style>
        .stApp {
            background-color: #f9f9f9;
            font-family: 'SolaimanLipi', sans-serif;
        }
        .chat-bubble-user {
            background-color: #DCF8C6;
            padding: 10px 15px;
            border-radius: 12px;
            margin: 5px 0;
            text-align: right;
            display: inline-block;
            max-width: 80%;
        }
        .chat-bubble-ai {
            background-color: #ffffff;
            padding: 10px 15px;
            border-radius: 12px;
            margin: 5px 0;
            text-align: left;
            display: inline-block;
            max-width: 80%;
            border: 1px solid #ddd;
        }
        .chat-container {
            max-height: 65vh;
            overflow-y: auto;
            padding: 10px;
            border-radius: 10px;
            background-color: #eee;
        }
        .stTextInput input {
            font-size: 16px;
            padding: 10px;
        }
    </style>
""", unsafe_allow_html=True)

st.title("ü§ñ ‡¶¨‡¶æ‡¶Ç‡¶≤‡¶æ ‡¶è‡¶Ü‡¶á ‡¶ö‡ßç‡¶Ø‡¶æ‡¶ü‡¶¨‡¶ü")
st.markdown("üí¨ ‡¶¨‡¶æ‡¶Ç‡¶≤‡¶æ‡ßü ‡¶™‡ßç‡¶∞‡¶∂‡ßç‡¶® ‡¶ï‡¶∞‡ßã, ‡¶è‡¶Ü‡¶á ‡¶â‡¶§‡ßç‡¶§‡¶∞ ‡¶¶‡ßá‡¶¨‡ßá‡•§")

# Session state messages
if "messages" not in st.session_state:
    st.session_state.messages = [
        {"role": "system", "content": "‡¶§‡ßÅ‡¶Æ‡¶ø ‡¶è‡¶ï‡¶ú‡¶® ‡¶∏‡¶π‡¶æ‡ßü‡¶ï AI ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶∏‡¶ø‡¶∏‡ßç‡¶ü‡ßç‡¶Ø‡¶æ‡¶®‡ßç‡¶ü, ‡¶∏‡¶¨ ‡¶â‡¶§‡ßç‡¶§‡¶∞ ‡¶¨‡¶æ‡¶Ç‡¶≤‡¶æ‡ßü ‡¶¶‡ßá‡¶¨‡ßá‡•§"}
    ]

# ‡¶ö‡ßç‡¶Ø‡¶æ‡¶ü ‡¶¶‡ßá‡¶ñ‡¶æ‡¶®‡ßã
st.markdown("<div class='chat-container'>", unsafe_allow_html=True)
for msg in st.session_state.messages[1:]:
    if msg["role"] == "user":
        st.markdown(f"<div class='chat-bubble-user'>üë§ {msg['content']}</div>", unsafe_allow_html=True)
    elif msg["role"] == "assistant":
        st.markdown(f"<div class='chat-bubble-ai'>ü§ñ {msg['content']}</div>", unsafe_allow_html=True)
st.markdown("</div>", unsafe_allow_html=True)

# ‡¶á‡¶®‡¶™‡ßÅ‡¶ü
prompt = st.chat_input("‡¶è‡¶ñ‡¶æ‡¶®‡ßá ‡¶≤‡¶ø‡¶ñ‡ßÅ‡¶®...")
if prompt:
    st.session_state.messages.append({"role": "user", "content": prompt})
    st.markdown(f"<div class='chat-bubble-user'>üë§ {prompt}</div>", unsafe_allow_html=True)

    # AI ‡¶â‡¶§‡ßç‡¶§‡¶∞
    reply = ""
    response = client.chat.completions.create(
        model="gpt-5",
        messages=st.session_state.messages,
        stream=True
    )

    reply_placeholder = st.empty()
    for chunk in response:
        if chunk.choices[0].delta.get("content"):
            text = chunk.choices[0].delta["content"]
            reply += text
            reply_placeholder.markdown(f"<div class='chat-bubble-ai'>ü§ñ {reply}</div>", unsafe_allow_html=True)

    st.session_state.messages.append({"role": "assistant", "content": reply})